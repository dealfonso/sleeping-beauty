# The services should be defined inside section using the .ini notation (i.e. [section]). The name of the 
#   service will be the name of the section.
# The values outside any section are considered to be inheritable for all the sections. Furthermore, they
#   build a section and thus, a service. 
#   * This way is useful if a single port in which to listen is considered because it is possible to define 
#     the service without the need of a section. Anyway, the preferred method is to define a section per port.
#
#
# Whether the service is active or not. The default value for the main section is 'false' but the default 
#   value for the other sections is 'true'
# ACTIVE=yes
# Port in which the meta-server will be listening for connections.
#   * Please do not confuse with the ports in which the effective services will be listening.
# PORT=-
# Command that checks if the service is available or not (whether it needs to execute the start command or not)
#  * it is called when an incoming connection is detected
# CHECK_CMD=false
# Command that starts the service (it returns an IP address and a port to which redirect the traffic)
#  * it is called when an incoming connection is detected and the execution of the CHECK_CMD fails
# START_CMD=false
# Command that stops the service
#  * it is called when the sleeping service is stopped
# STOP_CMD=false
# General timeout when executing a command
# * blank means no timeout
# EXEC_CMD_TIMEOUT=
# Timeout when executing the start command
# * blank means no timeout
# START_CMD_TIMEOUT=
# Timeout when executing the stop command
# * blank means no timeout
# STOP_CMD_TIMEOUT=
# Timeout when executing the check command
# * blank means no timeout
# CHECK_CMD_TIMEOUT=
# User that will listen for the incoming connection (thus the one that runs the commands)
# * blank means the current user
# USER=
# Period of time (in seconds) to execute the IDLE_CMD
# * 0 or blank will mean "deactivated"
# IDLE_CHECK_INTERVAL=
# Period of time after a service that has been reported to be idle, is considered to be efectively idle.
#   In that case, the STOP_CMD script will be called.
# IDLE_TIME=
# Command that is executed to detect wether the infrastructure is idle or not. If it is reported to be idle for
# a period of time determined in variable IDLE_TIME, the command STOP_CMD will be executed, to stop the service
#  * blank means "deactivated"
# IDLE_CMD=true
# Timeout when executing the idle command
# * blank means no timeout
# IDLE_CMD_TIMEOUT=

[Simple web server]
# Example for a simple service that spawns a web server in port 8080 to attend to incoming connections to port 80
# - The service is not active
ACTIVE=yes
# - The port in which it will listen is 80
PORT=80
# - The command that spawns the server is a simple netcat with a simple sentence (the START_CMD must return the IP and the
#   address to which forward the traffic).
START_CMD="( echo -e 'Response from 8080: $(date)' | nc -l -p 8080 -q 1 > /dev/null 2> /dev/null & ) ; echo '127.0.0.1 8080'"